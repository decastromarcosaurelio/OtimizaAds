import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

/**
 * Interface para o relat√≥rio de diagn√≥stico de an√∫ncios
 */
export interface DiagnosisReport {
  clarityScore: number;
  hookAnalysis: string;
  ctaAnalysis: string;
  mentalTriggers: string[];
  suggestions: string[];
}

/**
 * Interface para os dados de entrada do diagn√≥stico
 */
export interface DiagnosisInput {
  adText: string;
  userId: string;
}

/**
 * Interface para o resultado da otimiza√ß√£o de an√∫ncios
 */
export interface OptimizationResult {
  optimizedAds: string[];
  success: boolean;
  error?: string;
}

/**
 * Servi√ßo respons√°vel pelo diagn√≥stico e otimiza√ß√£o de an√∫ncios
 */
export const diagnosisService = {
  /**
   * Analisa um an√∫ncio e gera um relat√≥rio de diagn√≥stico
   * @param input Texto do an√∫ncio e ID do usu√°rio
   * @returns Relat√≥rio de diagn√≥stico
   */
  async analyzeAd(input: DiagnosisInput): Promise<DiagnosisReport | null> {
    try {
      // TODO: Quando a integra√ß√£o com IA estiver pronta, substituir por chamada real
      // Simular tempo de processamento
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simular relat√≥rio de diagn√≥stico
      const mockReport: DiagnosisReport = {
        clarityScore: 7.5,
        hookAnalysis: "O gancho inicial est√° adequado, mas poderia ser mais impactante. Considere usar uma pergunta provocativa ou uma estat√≠stica surpreendente.",
        ctaAnalysis: "A chamada para a√ß√£o est√° presente, mas n√£o transmite urg√™ncia. Adicione elementos de escassez ou tempo limitado.",
        mentalTriggers: ["Urg√™ncia", "Autoridade", "Prova Social"],
        suggestions: [
          "Adicione uma pergunta provocativa no in√≠cio",
          "Inclua n√∫meros ou estat√≠sticas para credibilidade",
          "Reforce a chamada para a√ß√£o com urg√™ncia",
          "Use mais gatilhos de prova social"
        ]
      };
      
      return mockReport;
    } catch (error) {
      console.error('Erro ao analisar an√∫ncio:', error);
      return null;
    }
  },
  
  /**
   * Gera vers√µes otimizadas de um an√∫ncio com base no diagn√≥stico
   * @param input Texto do an√∫ncio original e relat√≥rio de diagn√≥stico
   * @returns Vers√µes otimizadas do an√∫ncio
   */
  async optimizeAd(
    input: DiagnosisInput, 
    report: DiagnosisReport
  ): Promise<OptimizationResult> {
    try {
      // TODO: Quando a integra√ß√£o com IA estiver pronta, substituir por chamada real
      // Simular tempo de processamento
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simular an√∫ncios otimizados
      const mockOptimizedAds = [
        "üö® Voc√™ sabia que 87% das pessoas falham no marketing digital? Descubra o m√©todo exato que transformou mais de 1.000 empreendedores em especialistas. ‚è∞ √öltimas 24h com desconto! Clique agora! üëá",
        "‚ùì Por que seus concorrentes vendem mais que voc√™? A resposta est√° no nosso curso comprovado por + de 500 alunos. üî• Apenas hoje: 50% OFF! Garantir minha vaga ‚Üí",
        "‚úÖ M√©todo aprovado por 1.000+ empreendedores est√° com vagas limitadas! Transforme seu neg√≥cio em 30 dias ou seu dinheiro de volta. ‚ö° Restam apenas 12 vagas! Quero me inscrever!"
      ];
      
      // Salvar no hist√≥rico
      await this.saveToHistory(input, report, mockOptimizedAds);
      
      return {
        optimizedAds: mockOptimizedAds,
        success: true
      };
    } catch (error) {
      console.error('Erro ao otimizar an√∫ncio:', error);
      return {
        optimizedAds: [],
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido ao otimizar an√∫ncio'
      };
    }
  },
  
  /**
   * Salva o diagn√≥stico e otimiza√ß√£o no hist√≥rico do usu√°rio
   */
  async saveToHistory(
    input: DiagnosisInput, 
    diagnosisReport: DiagnosisReport, 
    optimizedAds: string[]
  ): Promise<void> {
    try {
      const content = `TEXTO ORIGINAL:\n${input.adText}\n\n---\n\nRELAT√ìRIO DE DIAGN√ìSTICO:\n${JSON.stringify(diagnosisReport, null, 2)}\n\n---\n\nVERS√ïES OTIMIZADAS:\n${optimizedAds.join('\n\n')}`;
      
      const { error } = await supabase
        .from('history_items')
        .insert({
          user_id: input.userId,
          type: 'diagnosis',
          title: `Diagn√≥stico: ${input.adText.substring(0, 50)}...`,
          content: content,
          input_data: {
            originalText: input.adText,
            diagnosisReport,
            optimizedAds
          }
        });

      if (error) {
        console.error('Erro ao salvar no hist√≥rico:', error);
        toast({
          title: "Erro ao salvar",
          description: "N√£o foi poss√≠vel salvar no hist√≥rico.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Erro ao salvar no hist√≥rico:', error);
    }
  },
  
  /**
   * Verifica se o usu√°rio pode usar a funcionalidade de diagn√≥stico
   * baseado em seu plano de assinatura
   * @param userId ID do usu√°rio
   * @returns Objeto contendo informa√ß√µes sobre o uso e limites
   */
  async checkUsageLimits(userId: string): Promise<{ canUse: boolean; currentUsage: number; limit: number }> {
    try {
      const { data, error } = await supabase.rpc('check_feature_usage', {
        user_uuid: userId,
        feature: 'diagnostics'
      });

      if (error) throw error;
      
      if (data && data.length > 0) {
        return {
          canUse: data[0].can_use,
          currentUsage: data[0].current_usage,
          limit: data[0].limit_value
        };
      }
      
      // Padr√£o caso n√£o encontre informa√ß√µes
      return { canUse: true, currentUsage: 0, limit: 3 };
    } catch (error) {
      console.error('Erro ao verificar limites de uso:', error);
      // Em caso de erro, permitir uso com valores padr√£o
      return { canUse: true, currentUsage: 0, limit: 3 };
    }
  },
  
  /**
   * Incrementa o contador de uso da funcionalidade de diagn√≥stico
   * @param userId ID do usu√°rio
   */
  async incrementUsageCounter(userId: string): Promise<void> {
    try {
      // Chamar a edge function que registra o uso
      await supabase.functions.invoke('track-usage', {
        body: { 
          feature_type: 'diagnostics',
          user_id: userId
        }
      });
    } catch (error) {
      console.error('Erro ao incrementar contador de uso:', error);
    }
  }
};