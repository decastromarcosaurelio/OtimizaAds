import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

/**
 * Interface para os dados de entrada para gera√ß√£o de an√∫ncios
 */
export interface AdGenerationInput {
  productName: string;
  productDescription: string;
  targetAudience: string;
  userId: string;
}

/**
 * Interface para os resultados da gera√ß√£o de an√∫ncios
 */
export interface AdGenerationResult {
  ads: string[];
  success: boolean;
  error?: string;
}

/**
 * Servi√ßo respons√°vel pela gera√ß√£o de an√∫ncios com IA
 */
export const adGenerationService = {
  /**
   * Gera an√∫ncios com base nas informa√ß√µes do produto
   * @param input Dados de entrada para a gera√ß√£o de an√∫ncios
   * @returns Resultado da gera√ß√£o contendo os an√∫ncios gerados
   */
  async generateAds(input: AdGenerationInput): Promise<AdGenerationResult> {
    try {
      // TODO: Quando a integra√ß√£o com IA estiver pronta, substituir por chamada real
      // Simula√ß√£o de chamada para API de IA
      console.log("Gerando an√∫ncios para:", input);
      
      // Simular tempo de processamento
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simular resposta da IA
      const generatedAds = [
        `üî• ${input.productName} est√° aqui! ${input.productDescription.substring(0, 50)}... Perfeito para ${input.targetAudience}. N√£o perca esta oportunidade! üëá`,
        `Voc√™ sabia que ${input.productName} pode transformar sua vida? ${input.productDescription.substring(0, 40)}... Ideal para ${input.targetAudience}. Clique e descubra!`,
        `Aten√ß√£o ${input.targetAudience}! ${input.productName} √© exatamente o que voc√™ precisa. ${input.productDescription.substring(0, 45)}... Garante j√° o seu!`,
        `${input.productName}: A solu√ß√£o que ${input.targetAudience} estava esperando! ${input.productDescription.substring(0, 50)}... Aproveite agora!`,
        `Revolucione sua experi√™ncia com ${input.productName}! ${input.productDescription.substring(0, 40)}... Desenvolvido especialmente para ${input.targetAudience}.`
      ];
      
      // Salvar no hist√≥rico do usu√°rio
      await this.saveToHistory(input, generatedAds);
      
      return {
        ads: generatedAds,
        success: true
      };
    } catch (error) {
      console.error('Erro ao gerar an√∫ncios:', error);
      return {
        ads: [],
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido ao gerar an√∫ncios'
      };
    }
  },
  
  /**
   * Salva os an√∫ncios gerados no hist√≥rico do usu√°rio
   * @param input Dados de entrada usados na gera√ß√£o
   * @param generatedAds An√∫ncios gerados
   */
  async saveToHistory(input: AdGenerationInput, generatedAds: string[]): Promise<void> {
    try {
      const { error } = await supabase
        .from('history_items')
        .insert({
          user_id: input.userId,
          type: 'generation',
          title: `An√∫ncios para ${input.productName}`,
          content: generatedAds.join('\n\n---\n\n'),
          input_data: {
            productName: input.productName,
            productDescription: input.productDescription,
            targetAudience: input.targetAudience
          }
        });

      if (error) {
        console.error('Erro ao salvar no hist√≥rico:', error);
        toast({
          title: "Erro ao salvar",
          description: "N√£o foi poss√≠vel salvar no hist√≥rico.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Erro ao salvar no hist√≥rico:', error);
    }
  },
  
  /**
   * Verifica se o usu√°rio pode usar a funcionalidade de gera√ß√£o de an√∫ncios
   * baseado em seu plano de assinatura
   * @param userId ID do usu√°rio
   * @returns Objeto contendo informa√ß√µes sobre o uso e limites
   */
  async checkUsageLimits(userId: string): Promise<{ canUse: boolean; currentUsage: number; limit: number }> {
    try {
      const { data, error } = await supabase.rpc('check_feature_usage', {
        user_uuid: userId,
        feature: 'generations'
      });

      if (error) throw error;
      
      if (data && data.length > 0) {
        return {
          canUse: data[0].can_use,
          currentUsage: data[0].current_usage,
          limit: data[0].limit_value
        };
      }
      
      // Padr√£o caso n√£o encontre informa√ß√µes
      return { canUse: true, currentUsage: 0, limit: 5 };
    } catch (error) {
      console.error('Erro ao verificar limites de uso:', error);
      // Em caso de erro, permitir uso com valores padr√£o
      return { canUse: true, currentUsage: 0, limit: 5 };
    }
  },
  
  /**
   * Incrementa o contador de uso da funcionalidade de gera√ß√£o de an√∫ncios
   * @param userId ID do usu√°rio
   */
  async incrementUsageCounter(userId: string): Promise<void> {
    try {
      // Chamar a edge function que registra o uso
      await supabase.functions.invoke('track-usage', {
        body: { 
          feature_type: 'generations',
          user_id: userId
        }
      });
    } catch (error) {
      console.error('Erro ao incrementar contador de uso:', error);
    }
  }
};